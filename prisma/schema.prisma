// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===============================================
// MODELOS DA EMPRESA E ESTRUTURA ORGANIZACIONAL
// ===============================================

model Company {
  id          String       @id @default(cuid())
  name        String
  industry    String?
  size        String? // Ou Int, dependendo da preferência
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relacionamentos
  users       User[]       @relation("CompanyUsers")
  departments Department[]
  requests    Request[]
}

model Department {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users   User[] @relation("DepartmentUsers")
  requests Request[] @relation("DepartmentRequests")

  @@unique([companyId, name])
}

// ===============================================
// MODELOS DE USUÁRIO E AUTENTICAÇÃO
// ===============================================

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?    // Added password field
  emailVerified DateTime?
  image         String?
  role          Role // Papel do usuário
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relacionamentos com a estrutura organizacional
  companyId     String
  company       Company    @relation("CompanyUsers", fields: [companyId], references: [id], onDelete: Cascade)

  departmentId  String?
  department    Department? @relation("DepartmentUsers", fields: [departmentId], references: [id], onDelete: SetNull)

  // Relacionamentos do NextAuth.js (ESSENCIAIS)
  accounts      Account[]
  sessions      Session[]

  // Relacionamentos com Solicitações
  requestsMade Request[]  @relation("UserRequests")
}

// Enum para os papéis de usuário
enum Role {
  ADMIN
  ATTENDANT
  EMPLOYEE
}

// ===============================================
// MODELOS DE SOLICITAÇÕES E GERENCIAMENTO
// ===============================================

model Request {
  id           String        @id @default(cuid())
  title        String
  description  String
  status       RequestStatus @default(OPEN)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relacionamentos
  createdById  String
  createdBy    User          @relation("UserRequests", fields: [createdById], references: [id])

  departmentId String
  department   Department    @relation("DepartmentRequests", fields: [departmentId], references: [id])

  companyId    String
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // (Opcional) attachments Attachment[]
}

// Enum para os status da solicitação
enum RequestStatus {
  OPEN
  IN_PROGRESS
  WAITING_INFO
  RESOLVED
  CANCELED
}

// ===============================================
// MODELOS DO NEXTAUTH.JS (Manter como estão)
// ===============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}